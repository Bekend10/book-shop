// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using book_shop.Data;

#nullable disable

namespace book_shop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250720142715_AddNewColumForAccount")]
    partial class AddNewColumForAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("authorsauthor_id")
                        .HasColumnType("int");

                    b.Property<int>("booksbook_id")
                        .HasColumnType("int");

                    b.HasKey("authorsauthor_id", "booksbook_id");

                    b.HasIndex("booksbook_id");

                    b.ToTable("BookAuthors", (string)null);
                });

            modelBuilder.Entity("book_shop.Models.Account", b =>
                {
                    b.Property<int>("account_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("account_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<int>("is_verify")
                        .HasColumnType("int");

                    b.Property<DateTime>("last_active")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("refresh_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("refresh_token_ext")
                        .HasColumnType("datetime2");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("account_id");

                    b.HasIndex("role_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("book_shop.Models.Address", b =>
                {
                    b.Property<int>("address_id")
                        .HasColumnType("int");

                    b.Property<string>("commune")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("councious")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("district")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("house_number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("address_id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("book_shop.Models.Author", b =>
                {
                    b.Property<int>("author_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("author_id"));

                    b.Property<string>("bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("image_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationally")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("author_id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("book_shop.Models.Book", b =>
                {
                    b.Property<int>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_id"));

                    b.Property<int>("author_id")
                        .HasColumnType("int");

                    b.Property<int>("book_review_id")
                        .HasColumnType("int");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("image_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("is_bn")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("price_origin")
                        .HasColumnType("int");

                    b.Property<string>("publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("publisher_year")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("book_id");

                    b.HasIndex("category_id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("book_shop.Models.BookDetail", b =>
                {
                    b.Property<int>("detail_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("detail_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("file_demo_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("is_bn")
                        .HasColumnType("int");

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("number_of_page")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("price_origin")
                        .HasColumnType("int");

                    b.Property<string>("publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("publisher_year")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("detail_id");

                    b.HasIndex("book_id")
                        .IsUnique();

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("book_shop.Models.BookReview", b =>
                {
                    b.Property<int>("book_review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_review_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("book_review_id");

                    b.HasIndex("book_id");

                    b.HasIndex("user_id");

                    b.ToTable("BookReviews");
                });

            modelBuilder.Entity("book_shop.Models.Cart", b =>
                {
                    b.Property<int>("cart_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cart_id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("total_amount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("cart_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("book_shop.Models.CartDetail", b =>
                {
                    b.Property<int>("cart_detail_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cart_detail_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("cart_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("unit_price")
                        .HasColumnType("int");

                    b.HasKey("cart_detail_id");

                    b.HasIndex("book_id");

                    b.HasIndex("cart_id");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("book_shop.Models.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("book_shop.Models.Method", b =>
                {
                    b.Property<int>("method_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("method_id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("method_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("method_id");

                    b.ToTable("Methods");
                });

            modelBuilder.Entity("book_shop.Models.Order", b =>
                {
                    b.Property<int>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_id"));

                    b.Property<int>("method_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("order_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("total_amount")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("order_id");

                    b.HasIndex("method_id");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("book_shop.Models.OrderDetail", b =>
                {
                    b.Property<int>("order_detail_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_detail_id"));

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("unit_price")
                        .HasColumnType("int");

                    b.HasKey("order_detail_id");

                    b.HasIndex("book_id");

                    b.HasIndex("order_id")
                        .IsUnique();

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("book_shop.Models.Payment", b =>
                {
                    b.Property<int>("payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("payment_id"));

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<int>("method_id")
                        .HasColumnType("int");

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("payment_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("payment_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("payment_id");

                    b.HasIndex("method_id");

                    b.HasIndex("order_id")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("book_shop.Models.Role", b =>
                {
                    b.Property<int>("role_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_id"));

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("role_id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("book_shop.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<int>("address_id")
                        .HasColumnType("int");

                    b.Property<int>("book_review_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("gender")
                        .HasColumnType("bit");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("book_shop.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("authorsauthor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_shop.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksbook_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("book_shop.Models.Account", b =>
                {
                    b.HasOne("book_shop.Models.Role", "role")
                        .WithMany("account")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("book_shop.Models.User", "user")
                        .WithOne("Account")
                        .HasForeignKey("book_shop.Models.Account", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("book_shop.Models.Address", b =>
                {
                    b.HasOne("book_shop.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("book_shop.Models.Address", "address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("book_shop.Models.Book", b =>
                {
                    b.HasOne("book_shop.Models.Category", "category")
                        .WithMany("book")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("book_shop.Models.BookDetail", b =>
                {
                    b.HasOne("book_shop.Models.Book", "book")
                        .WithOne("bookDetail")
                        .HasForeignKey("book_shop.Models.BookDetail", "book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");
                });

            modelBuilder.Entity("book_shop.Models.BookReview", b =>
                {
                    b.HasOne("book_shop.Models.Book", "book")
                        .WithMany("bookReviews")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_shop.Models.User", "user")
                        .WithMany("BookReview")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("user");
                });

            modelBuilder.Entity("book_shop.Models.Cart", b =>
                {
                    b.HasOne("book_shop.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("book_shop.Models.Cart", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("book_shop.Models.CartDetail", b =>
                {
                    b.HasOne("book_shop.Models.Book", "book")
                        .WithMany("cartDetails")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("book_shop.Models.Cart", "cart")
                        .WithMany("cart_detail")
                        .HasForeignKey("cart_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("cart");
                });

            modelBuilder.Entity("book_shop.Models.Order", b =>
                {
                    b.HasOne("book_shop.Models.Method", "method")
                        .WithMany("orders")
                        .HasForeignKey("method_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("book_shop.Models.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("method");
                });

            modelBuilder.Entity("book_shop.Models.OrderDetail", b =>
                {
                    b.HasOne("book_shop.Models.Book", "book")
                        .WithMany("orderDetail")
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("book_shop.Models.Order", "order")
                        .WithOne("orderDetail")
                        .HasForeignKey("book_shop.Models.OrderDetail", "order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("order");
                });

            modelBuilder.Entity("book_shop.Models.Payment", b =>
                {
                    b.HasOne("book_shop.Models.Method", "method")
                        .WithMany("payments")
                        .HasForeignKey("method_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("book_shop.Models.Order", "order")
                        .WithOne("Payment")
                        .HasForeignKey("book_shop.Models.Payment", "order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("method");

                    b.Navigation("order");
                });

            modelBuilder.Entity("book_shop.Models.Book", b =>
                {
                    b.Navigation("bookDetail")
                        .IsRequired();

                    b.Navigation("bookReviews");

                    b.Navigation("cartDetails");

                    b.Navigation("orderDetail");
                });

            modelBuilder.Entity("book_shop.Models.Cart", b =>
                {
                    b.Navigation("cart_detail");
                });

            modelBuilder.Entity("book_shop.Models.Category", b =>
                {
                    b.Navigation("book");
                });

            modelBuilder.Entity("book_shop.Models.Method", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("payments");
                });

            modelBuilder.Entity("book_shop.Models.Order", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("orderDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("book_shop.Models.Role", b =>
                {
                    b.Navigation("account");
                });

            modelBuilder.Entity("book_shop.Models.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BookReview");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
